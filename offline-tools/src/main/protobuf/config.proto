syntax = "proto3";

package net.goui.phonenumber.tools.proto;

option java_package = "net.goui.phonenumber.tools.proto";

// Examples:
//
// 1. An Empty configuration:
//
// This results in all calling codes being processed without any simplification (i.e. copying
// the original range data losslessly).
//
// 2. Specifying only a false positive limit.
// --------
//    default_maximum_false_positive_percent: 15
// --------
// All calling codes are simplified until false positive rate of 15% is achieved.
//
// 3. Explicitly listing calling codes:
// --------
//    calling_code: 1
//    calling_code: 44
//    default_maximum_false_positive_percent: 15
// --------
// Processes only the listed calling codes with a maximum false positive rate of 15%.
//
// 4. Adding overrides
// --------
//    default_maximum_false_positive_percent: 15
//    override {
//      calling_codes: "1, 44"
//      maximum_false_positive_percent: 0
//    }
// --------
// Processes all calling codes with a maximum false positive rate of 15%, except for
// '1' and '44', which is copied without simplification.
//
message MetadataConfigProto {
  VersionInfo version = 1;
  message VersionInfo {
    // Data structure major version, increased when incompatible changes are made to the protocol
    // buffer structure (e.g. removing fields). Code should test this version explicitly and reject
    // any unsupported/unknown major versions.
    //
    // This relates only to the protocol buffer structure, and is unrelated to the semantic meaning
    // of the data held by this message.
    uint32 major_version = 1;

    // Data structure minor version, increased when backwards compatible changes are made (e.g. adding
    // new fields which are optional for existing code). Code may rely on a larger minor version than
    // it was expecting, but not smaller.
    //
    // This relates only to the protocol buffer structure, and is unrelated to the semantic meaning
    // of the data held by this message.
    uint32 minor_version = 2;

    // A URL/URI identifying the data schema. This defines the available data, such as the available
    // classifiers and their semantic meaning, as well as which representation(s) the matcher data
    // will be provided in.
    //
    // Within a schema, all classifiers have a local namespace and keys such as "FIXED_LINE" can mean
    // semantically different things for different schemas.
    //
    // This value may or may not reference a real web page, but if it does, that page should explain
    // the schema semantics.
    //
    // Once published, a data schema should always retain the same semantics for existing classifiers.
    //
    // Code may accept any one of multiple schemas if their meanings are sufficiently similar, but
    // should not assume that the same classifier/key name(s) will imply the same semantics.
    string data_schema_uri = 3;

    // The data schema version defining which classifiers are present. This should be increased when
    // new data is added to an existing schema. Code can rely on later versions of a schema being
    // backwards compatible with earlier code.
    uint32 data_schema_version = 4;
  }

  // Available matcher types. A supplier may choose to provide matcher data in one or more of these
  // representations as specified by the data schema and version. Code using the data should only
  // to examine the set of matcher types if the schema allows more than one representation.
  repeated MatcherType matcher_type = 2;
  enum MatcherType {
    MATCHER_TYPE_UNKNOWN = 0;
    DIGIT_SEQUENCE_MATCHER = 1;
    REGULAR_EXPRESSION = 2;
  }

  // A list of calling codes to be processed with the default values. Exactly one of 'calling_code'
  // and 'calling_codes' can be used. The former specifies calling codes by their numeric value, and
  // the latter is a comma-separated list of values.
  //
  // If no calling codes are specified, the value of `exclude_by_default` determines what will be
  // processed.
  repeated uint32 calling_code = 3;
  string calling_codes = 4;

  // Used to determine the default behaviour when `calling_code` is empty.
  // If false (default value) then all calling codes are processed.
  // If true, only calling codes in overrides are processed.
  bool exclude_by_default = 5;

  // A range expression defining valid phone numbers based on the underlying metadata. See
  // CustomValueProto#ranges for a more detailed description of range expression syntax. If
  // omitted, the validation ranges from the underlying metadata will be used directly (this is
  // a safe default).
  //
  // This feature can be useful for ignoring specific phone number types in use cases where they
  // are never expected, and may reduce data size.
  //
  // NOTE: Specifying a restricted set of validation ranges is NOT the same as removing ranges
  // from the underlying metadata.
  //
  // For example, if we want to exclude PAGER numbers from our metadata, we could download and edit
  // the underlying CSV files to remove rows for PAGER ranges. However, if we do this, the metadata
  // processor would treat these ranges like any other unspecified number range.
  //
  // In particular, simplifying metadata with PAGER ranges removed may result in "nearby" ranges
  // being expanded to cover the removed PAGER ranges. This would likely result in ranges which were
  // originally assigned to "PAGER" in the underlying data being reassigned to some other type (e.g.
  // "MOBILE"). Using a `validation_ranges` expression will avoid this issue.
  //
  // By setting:
  //   validation_ranges: "ALL:RANGES - TYPE:PAGER"
  //
  // we indicate that we don't want to include PAGER numbers as valid. The metadata processor then
  // tracks the "removed" ranges internally to ensure they are never reassigned, even after
  // simplification. The only downside to this is that it may result in slightly larger (but
  // arguably more correct) metadata.
  string validation_ranges = 6;

  // Default maximum amount of false positive numbers to appear in simplified ranges. This value
  // allows a meaningful limit to be placed on the results of the simplification process.
  //
  // The larger this value, the more simplification can be applied to the original range data
  // (resulting in smaller data).
  //
  // If unspecified, no simplification will be performed (equivalent to setting a value of zero).
  int32 default_maximum_false_positive_percent = 7;

  // Default minimum prefix length for simplified ranges (greater than zero). Simplification will
  // never create prefixes with fewer than this number of digits (though they may already exist in
  // the original data).
  //
  // This is a secondary control for simplification and adds an additional limits on what sort of
  // simplification can occur. The smaller this value, the larger the degree to which the original
  // range data can be simplified by shortening prefix information, and a large value may result in
  // simplification being unable to achieve the specified false positive rate.
  //
  // If unspecified, a value of 1 is assumed (allowing the maximum degree of simplification up to
  // the "false positive" limit.
  int32 default_minimum_prefix_length = 8;

  // If true, additional information necessary to implement phone number parsing will not be added
  // to the metadata. This is included by default since it's a relatively small amount of data for
  // a commonly used feature, but it can be excluded in cases where metadata size is critical.
  bool exclude_parser_metadata = 9;

  // If true, example numbers will not be added to the metadata. This is included by default since
  // it's a relatively small amount of data for a commonly used feature, but it can be excluded in
  // cases where metadata size is critical.
  bool exclude_example_numbers = 10;

  // Available formats. A supplier may choose to provide matcher metadata with one or more of these
  // formats. Adding a single format is likely to increase metadata size noticeably, but adding a
  // second format is a minimal additional overhead.
  //
  // Note that E.164 formatting is always available in the client API (e.g. "+441923123456").
  repeated NumberFormat format = 11;
  enum NumberFormat {
    NUMBER_FORMAT_UNKNOWN = 0;
    // Enables formatting phone numbers for international dialling from outside the region (e.g.
    // "+44 1923 123456").
    INTERNATIONAL = 1;
    // Enables formatting phone numbers for national dialling from within a region (e.g.
    // "01923 123456").
    NATIONAL = 2;
  }

  // Specification of the classifiers defined by this configuration.
  //
  // Including an in-built classifier:
  //
  // classifier { type_name: "TYPE" }
  //
  // Custom classifier for detecting "normal" numbers expected to be callable at normal rates:
  // -----------------------------------------------------------------------------------------
  // classifier {
  //   # ...
  //   type_name: "CUSTOM:TYPE"
  //   custom {
  //     # Default assignment for anything not captured below (if omitted, classifier will not
  //     # recognize these values (i.e. not part of its valid range).
  //     default_value: "OTHER"
  //
  //     # When set, order of values matters (first assignment wins).
  //     is_single_valued: true
  //
  //     # Define high cost numbers based on the built in "TARIFF" column.
  //     value {
  //       name: "HIGH_COST"
  //       ranges: "$TARIFF:PREMIUM_RATE + $TARIFF:SHARED_COST"
  //     }
  //
  //     # High cost numbers are removed automatically (they were assigned first).
  //     value {
  //       name: "NORMAL"
  //       ranges: "$TYPE:MOBILE + $TYPE:FIXED_LINE + $TYPE:FIXED_LINE_OR_MOBILE + $TYPE:VOIP"
  //     }
  //   }
  // }
  // ----------------------------------------------------------------------------------------------
  //
  repeated ClassifierConfigProto classifier = 12;
  message ClassifierConfigProto {
    string type_name = 1;
    CustomClassifierProto custom = 2;
  }

  message CustomClassifierProto {
    // If true, metadata which supports the optional ability to carry out "partial matches" on phone
    // number prefixes will not be included.
    //
    // Partial matching permits a more fine grained interrogation of phone numbers, and can be useful
    // for supporting improved interactive phone number entry.
    //
    // If this flag is set, metadata is optimized for representing sets of complete numbers, but
    // cannot reliably classify partial numbers. If you can afford the data size increase (about 20%
    // more than for the disabled version) then, to give users maximum flexibility, it is recommended
    // that you DO NOT set this flag.
    //
    // If you do need to make a version of your data with partial matching disabled, it is also
    // recommended that you create a version with a different schema where it is enabled to give
    // user a choice to which to use.
    //
    // WARNING: Changing this value *will* affect the ordering of match operations, and thus may
    // change classification results in cases of false positives (i.e. numbers which are only valid
    // as a result of range simplification).
    bool disable_partial_matching = 1;

    string default_value = 2;
    bool is_single_valued = 3;
    repeated CustomValueProto value = 4;
  }

  message CustomValueProto {
    // The value name, given as UNDERSCORE_SEPARATED_UPPERCASE Ascii.
    string name = 1;

    // A range expression defining the phone number ranges to be associated with this value.
    //
    // A range expression is a combination of range identifiers and binary set operators which defines
    // some final range set.
    //
    // Range identifiers take the form of "<type>:<value>" for the types/values in the underlying
    // metadata (e.g. "TYPE:MOBILE" or "TARIFF:TOLL_FREE"). Any additional range identifier of
    // "ALL:RANGES" is available to access the overall validation range.
    //
    // The available binary set operators are:
    //   '+' (union), '-' (subtraction / set difference) and '^' (intersection).
    // Expressions are evaluated left-to-right, but parentheses can be used to impose precedence.
    //
    // For example the following expression creates a range for phone numbers which could be mobile
    // and have no special tariff:
    //   "TARIFF:STANDARD_RATE ^ (TYPE:MOBILE + TYPE:FIXED_LINE_OR_MOBILE + TYPE:VOIP)"
    string ranges = 2;
  }

  // Overrides for specific calling codes to control the simplification in a fine-grained manner.
  repeated ConfigOverrideProto override = 13;
  message ConfigOverrideProto {
    // A non-empty list of calling codes to which this overridden configuration should apply.
    repeated uint32 calling_code = 1;
    string calling_codes = 2;
    // Override for `default_maximum_false_positive_percent`. A value of zero can be given to disable
    // simplification for this set of calling codes.
    int32 maximum_false_positive_percent = 3;
    // Override for `default_minimum_prefix_length`.
    int32 minimum_prefix_length = 4;
  }
}
